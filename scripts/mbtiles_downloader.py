#!/usr/bin/env python3
"""
MBTiles Downloader Script for Shoonya Innovation
Downloads map tiles and creates MBTiles database files
"""

import os
import sys
import json
import sqlite3
import requests
import math
from typing import Dict, Tuple, List
import time
from urllib.parse import urljoin

class MBTilesDownloader:
    def __init__(self):
        self.tile_sources = {
            'openstreetmap': 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
            'satellite': 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
            'terrain': 'https://stamen-tiles.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png'
        }
        
    def deg2num(self, lat_deg: float, lon_deg: float, zoom: int) -> Tuple[int, int]:
        """Convert latitude/longitude to tile numbers"""
        lat_rad = math.radians(lat_deg)
        n = 2.0 ** zoom
        x = int((lon_deg + 180.0) / 360.0 * n)
        y = int((1.0 - math.asinh(math.tan(lat_rad)) / math.pi) / 2.0 * n)
        return (x, y)
    
    def create_mbtiles_db(self, filename: str, bounds: Dict, metadata: Dict) -> str:
        """Create MBTiles database file"""
        if os.path.exists(filename):
            os.remove(filename)
            
        conn = sqlite3.connect(filename)
        cursor = conn.cursor()
        
        # Create tables
        cursor.execute('''
            CREATE TABLE metadata (name text, value text);
        ''')
        
        cursor.execute('''
            CREATE TABLE tiles (zoom_level integer, tile_column integer, 
                              tile_row integer, tile_data blob);
        ''')
        
        # Insert metadata
        metadata_entries = [
            ('name', metadata.get('name', 'MBTiles')),
            ('type', 'baselayer'),
            ('version', '1.0'),
            ('description', metadata.get('description', 'Generated by Shoonya Innovation')),
            ('format', 'png'),
            ('bounds', f"{bounds['west']},{bounds['south']},{bounds['east']},{bounds['north']}"),
            ('center', f"{(bounds['west'] + bounds['east'])/2},{(bounds['south'] + bounds['north'])/2}"),
            ('minzoom', str(metadata['minZoom'])),
            ('maxzoom', str(metadata['maxZoom']))
        ]
        
        cursor.executemany('INSERT INTO metadata (name, value) VALUES (?, ?)', metadata_entries)
        conn.commit()
        
        return filename
    
    def download_tiles(self, bounds: Dict, min_zoom: int, max_zoom: int, 
                      tile_source: str, output_name: str) -> Dict:
        """Download tiles and create MBTiles file"""
        print(f"Starting download for {output_name}")
        print(f"Bounds: {bounds}")
        print(f"Zoom levels: {min_zoom} to {max_zoom}")
        print(f"Tile source: {tile_source}")
        
        if tile_source not in self.tile_sources:
            raise ValueError(f"Unknown tile source: {tile_source}")
        
        url_template = self.tile_sources[tile_source]
        filename = f"{output_name}.mbtiles"
        
        # Create MBTiles database
        metadata = {
            'name': output_name,
            'description': f'Generated by Shoonya Innovation MBTiles Downloader',
            'minZoom': min_zoom,
            'maxZoom': max_zoom
        }
        
        self.create_mbtiles_db(filename, bounds, metadata)
        conn = sqlite3.connect(filename)
        cursor = conn.cursor()
        
        total_tiles = 0
        downloaded_tiles = 0
        
        # Calculate total tiles
        for zoom in range(min_zoom, max_zoom + 1):
            min_x, max_y = self.deg2num(bounds['north'], bounds['west'], zoom)
            max_x, min_y = self.deg2num(bounds['south'], bounds['east'], zoom)
            total_tiles += (max_x - min_x + 1) * (max_y - min_y + 1)
        
        print(f"Total tiles to download: {total_tiles}")
        
        # Download tiles
        session = requests.Session()
        session.headers.update({
            'User-Agent': 'Shoonya Innovation MBTiles Downloader 1.0'
        })
        
        for zoom in range(min_zoom, max_zoom + 1):
            min_x, max_y = self.deg2num(bounds['north'], bounds['west'], zoom)
            max_x, min_y = self.deg2num(bounds['south'], bounds['east'], zoom)
            
            for x in range(min_x, max_x + 1):
                for y in range(min_y, max_y + 1):
                    try:
                        url = url_template.format(z=zoom, x=x, y=y)
                        response = session.get(url, timeout=10)
                        
                        if response.status_code == 200:
                            # Convert TMS y to MBTiles y
                            mbtiles_y = (2 ** zoom - 1) - y
                            
                            cursor.execute(
                                'INSERT INTO tiles (zoom_level, tile_column, tile_row, tile_data) VALUES (?, ?, ?, ?)',
                                (zoom, x, mbtiles_y, response.content)
                            )
                            downloaded_tiles += 1
                            
                            if downloaded_tiles % 100 == 0:
                                conn.commit()
                                progress = (downloaded_tiles / total_tiles) * 100
                                print(f"Progress: {progress:.1f}% ({downloaded_tiles}/{total_tiles})")
                        
                        # Rate limiting
                        time.sleep(0.1)
                        
                    except Exception as e:
                        print(f"Error downloading tile {zoom}/{x}/{y}: {e}")
                        continue
        
        conn.commit()
        conn.close()
        
        file_size = os.path.getsize(filename)
        
        return {
            'success': True,
            'filename': filename,
            'total_tiles': total_tiles,
            'downloaded_tiles': downloaded_tiles,
            'file_size': file_size,
            'file_size_mb': round(file_size / (1024 * 1024), 2)
        }

def main():
    """Main function for command line usage"""
    if len(sys.argv) != 2:
        print("Usage: python mbtiles_downloader.py <config.json>")
        sys.exit(1)
    
    config_file = sys.argv[1]
    
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
        
        downloader = MBTilesDownloader()
        result = downloader.download_tiles(
            bounds=config['bounds'],
            min_zoom=config['minZoom'],
            max_zoom=config['maxZoom'],
            tile_source=config['tileSource'],
            output_name=config['outputName']
        )
        
        print(f"\nDownload completed!")
        print(f"File: {result['filename']}")
        print(f"Size: {result['file_size_mb']} MB")
        print(f"Tiles: {result['downloaded_tiles']}/{result['total_tiles']}")
        
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
